// Package gosatellite provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package gosatellite

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Error defines model for Error.
type Error struct {
	Error struct {
		FullMessages *string `json:"full_messages,omitempty"`
	} `json:"error"`
}

// Organization defines model for Organization.
type Organization struct {
	Ancestry         *string `json:"ancestry,omitempty"`
	ComputeResources *[]struct {
		Id *int `json:"id,omitempty"`
	} `json:"compute_resources,omitempty"`
	ConfigTemplates *[]struct {
		Id             *int    `json:"id,omitempty"`
		Name           *string `json:"name,omitempty"`
		TemplateKindId *int    `json:"template_kind_id,omitempty"`
		TemplateName   *string `json:"template_name,omitempty"`
	} `json:"config_templates,omitempty"`
	CreatedAt   *string `json:"created_at,omitempty"`
	Description *string `json:"description,omitempty"`
	Domains     *[]struct {
		Id *int `json:"id,omitempty"`
	} `json:"domains,omitempty"`
	Environments *[]struct {
		Id *int `json:"id,omitempty"`
	} `json:"environments,omitempty"`
	Hostgroups *[]struct {
		Id *int `json:"id,omitempty"`
	} `json:"hostgroups,omitempty"`
	HostsCount *int `json:"hosts_count,omitempty"`
	Id         *int `json:"id,omitempty"`
	Locations  *[]struct {
		Description *string `json:"description,omitempty"`
		Id          *int    `json:"id,omitempty"`
		Name        *string `json:"name,omitempty"`
		Title       *string `json:"title,omitempty"`
	} `json:"locations,omitempty"`
	Media *[]struct {
		Id *int `json:"id,omitempty"`
	} `json:"media,omitempty"`
	Name       *string `json:"name,omitempty"`
	Parameters *[]struct {
		CreatedAt     *string `json:"created_at,omitempty"`
		Id            *int    `json:"id,omitempty"`
		Name          *string `json:"name,omitempty"`
		ParameterType *string `json:"parameter_type,omitempty"`
		Priority      *int    `json:"priority,omitempty"`
		UpdatedAt     *string `json:"updated_at,omitempty"`
		Value         *string `json:"value,omitempty"`
	} `json:"parameters,omitempty"`
	ParentId              *int    `json:"parent_id,omitempty"`
	ParentName            *string `json:"parent_name,omitempty"`
	ProvisioningTemplates *[]struct {
		Id *int `json:"id,omitempty"`
	} `json:"provisioning_templates,omitempty"`
	Ptables *[]struct {
		CreatedAt *string `json:"created_at,omitempty"`
		Id        *int    `json:"id,omitempty"`
		Name      *string `json:"name,omitempty"`
		OsFamily  *string `json:"os_family,omitempty"`
		UpdatedAt *string `json:"updated_at,omitempty"`
	} `json:"ptables,omitempty"`
	Realms *[]struct {
		Id *int `json:"id,omitempty"`
	} `json:"realms,omitempty"`
	SelectAllTypes *[]struct {
		Id *int `json:"id,omitempty"`
	} `json:"select_all_types,omitempty"`
	SmartProxies *[]struct {
		Id   *int    `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Url  *string `json:"url,omitempty"`
	} `json:"smart_proxies,omitempty"`
	Subnets *[]struct {
		Id *int `json:"id,omitempty"`
	} `json:"subnets,omitempty"`
	Title     *string `json:"title,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Users     *[]struct {
		Description *string `json:"description,omitempty"`
		Id          *int    `json:"id,omitempty"`
		Login       *string `json:"login,omitempty"`
	} `json:"users,omitempty"`
}

// OrganizationCreate defines model for OrganizationCreate.
type OrganizationCreate struct {
	Organization struct {
		ComputeResourceIds      *[]int  `json:"compute_resource_ids,omitempty"`
		ConfigTemplateIds       *[]int  `json:"config_template_ids,omitempty"`
		Description             *string `json:"description,omitempty"`
		DomainIds               *[]int  `json:"domain_ids,omitempty"`
		EnvironmentIds          *[]int  `json:"environment_ids,omitempty"`
		HostgroupIds            *[]int  `json:"hostgroup_ids,omitempty"`
		Label                   *string `json:"label,omitempty"`
		MediumIds               *[]int  `json:"medium_ids,omitempty"`
		Name                    string  `json:"name"`
		ProvisioningTemplateIds *[]int  `json:"provisioning_template_ids,omitempty"`
		PtableIds               *[]int  `json:"ptable_ids,omitempty"`
		RealmIds                *[]int  `json:"realm_ids,omitempty"`
		SmartProxyIds           *[]int  `json:"smart_proxy_ids,omitempty"`
		SubnetIds               *[]int  `json:"subnet_ids,omitempty"`
		UserIds                 *[]int  `json:"user_ids,omitempty"`
	} `json:"organization"`
}

// OrganizationUpdate defines model for OrganizationUpdate.
type OrganizationUpdate struct {
	Organization struct {
		ComputeResourceIds      *[]int    `json:"compute_resource_ids,omitempty"`
		ConfigTemplateIds       *[]int    `json:"config_template_ids,omitempty"`
		Description             *string   `json:"description,omitempty"`
		DomainIds               *[]int    `json:"domain_ids,omitempty"`
		EnvironmentIds          *[]int    `json:"environment_ids,omitempty"`
		HostgroupIds            *[]int    `json:"hostgroup_ids,omitempty"`
		IgnoreTypes             *[]string `json:"ignore_types,omitempty"`
		MediumIds               *[]int    `json:"medium_ids,omitempty"`
		Name                    *string   `json:"name,omitempty"`
		ParentId                *int      `json:"parent_id,omitempty"`
		ProvisioningTemplateIds *[]int    `json:"provisioning_template_ids,omitempty"`
		PtableIds               *[]int    `json:"ptable_ids,omitempty"`
		RealmIds                *[]int    `json:"realm_ids,omitempty"`
		SmartProxyIds           *[]int    `json:"smart_proxy_ids,omitempty"`
		SubnetIds               *[]int    `json:"subnet_ids,omitempty"`
		UserIds                 *[]int    `json:"user_ids,omitempty"`
	} `json:"organization"`
	RedhatRepositoryUrl *string `json:"redhat_repository_url,omitempty"`
}

// GetOrganizationsParams defines parameters for GetOrganizations.
type GetOrganizationsParams struct {

	// Scope by locations
	LocationId *int `json:"location_id,omitempty"`

	// Scope by organizations
	OrganizationId *int `json:"organization_id,omitempty"`

	// Search string
	Search *string `json:"search,omitempty"`

	// Page number, starting at 1
	Page *int `json:"page,omitempty"`

	// Number of results per page to return
	PerPage *int `json:"per_page,omitempty"`

	// Sort field and order, eg. 'id DESC'
	Order *string `json:"order,omitempty"`

	// Whether or not to show all results
	FullResult *bool `json:"full_result,omitempty"`

	// Field to sort the results on
	SortBy *string `json:"sort_by,omitempty"`

	// How to order the sorted results (e.g. ASC for ascending)
	SortOrder *string `json:"sort_order,omitempty"`
}

// CreateOrganizationJSONBody defines parameters for CreateOrganization.
type CreateOrganizationJSONBody OrganizationCreate

// DeleteOrganizationParams defines parameters for DeleteOrganization.
type DeleteOrganizationParams struct {

	// Scope by locations
	LocationId *int `json:"location_id,omitempty"`

	// Scope by organizations
	OrganizationId *int `json:"organization_id,omitempty"`
}

// GetOrganizationByIdParams defines parameters for GetOrganizationById.
type GetOrganizationByIdParams struct {

	// Scope by locations
	LocationId *int `json:"location_id,omitempty"`

	// Scope by organizations
	OrganizationId *int `json:"organization_id,omitempty"`
}

// UpdateOrganizationJSONBody defines parameters for UpdateOrganization.
type UpdateOrganizationJSONBody OrganizationUpdate

// CreateOrganizationRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody CreateOrganizationJSONBody

// UpdateOrganizationRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody UpdateOrganizationJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(req *http.Request, ctx context.Context) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetOrganizations request
	GetOrganizations(ctx context.Context, params *GetOrganizationsParams) (*http.Response, error)

	// CreateOrganization request  with any body
	CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody) (*http.Response, error)

	// DeleteOrganization request
	DeleteOrganization(ctx context.Context, id int, params *DeleteOrganizationParams) (*http.Response, error)

	// GetOrganizationById request
	GetOrganizationById(ctx context.Context, id int, params *GetOrganizationByIdParams) (*http.Response, error)

	// UpdateOrganization request  with any body
	UpdateOrganizationWithBody(ctx context.Context, id int, contentType string, body io.Reader) (*http.Response, error)

	UpdateOrganization(ctx context.Context, id int, body UpdateOrganizationJSONRequestBody) (*http.Response, error)
}

func (c *Client) GetOrganizations(ctx context.Context, params *GetOrganizationsParams) (*http.Response, error) {
	req, err := NewGetOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganization(ctx context.Context, id int, params *DeleteOrganizationParams) (*http.Response, error) {
	req, err := NewDeleteOrganizationRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationById(ctx context.Context, id int, params *GetOrganizationByIdParams) (*http.Response, error) {
	req, err := NewGetOrganizationByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationWithBody(ctx context.Context, id int, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganization(ctx context.Context, id int, body UpdateOrganizationJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetOrganizationsRequest generates requests for GetOrganizations
func NewGetOrganizationsRequest(server string, params *GetOrganizationsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/katello/api/organizations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.LocationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "location_id", *params.LocationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "organization_id", *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Order != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order", *params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FullResult != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "full_result", *params.FullResult); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort_order", *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRequest calls the generic CreateOrganization builder with application/json body
func NewCreateOrganizationRequest(server string, body CreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationRequestWithBody generates requests for CreateOrganization with any type of body
func NewCreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/katello/api/organizations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteOrganizationRequest generates requests for DeleteOrganization
func NewDeleteOrganizationRequest(server string, id int, params *DeleteOrganizationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/katello/api/organizations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.LocationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "location_id", *params.LocationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "organization_id", *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationByIdRequest generates requests for GetOrganizationById
func NewGetOrganizationByIdRequest(server string, id int, params *GetOrganizationByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/katello/api/organizations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.LocationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "location_id", *params.LocationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "organization_id", *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationRequest calls the generic UpdateOrganization builder with application/json body
func NewUpdateOrganizationRequest(server string, id int, body UpdateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateOrganizationRequestWithBody generates requests for UpdateOrganization with any type of body
func NewUpdateOrganizationRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/katello/api/organizations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		if !strings.HasSuffix(baseURL, "/") {
			baseURL += "/"
		}
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

type getOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r getOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type createOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Organization
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r createOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r createOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type deleteOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r deleteOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r deleteOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getOrganizationByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r getOrganizationByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getOrganizationByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type updateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r updateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r updateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetOrganizationsWithResponse request returning *GetOrganizationsResponse
func (c *ClientWithResponses) GetOrganizationsWithResponse(ctx context.Context, params *GetOrganizationsParams) (*getOrganizationsResponse, error) {
	rsp, err := c.GetOrganizations(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsResponse(rsp)
}

// CreateOrganizationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationResponse
func (c *ClientWithResponses) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*createOrganizationResponse, error) {
	rsp, err := c.CreateOrganizationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody) (*createOrganizationResponse, error) {
	rsp, err := c.CreateOrganization(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

// DeleteOrganizationWithResponse request returning *DeleteOrganizationResponse
func (c *ClientWithResponses) DeleteOrganizationWithResponse(ctx context.Context, id int, params *DeleteOrganizationParams) (*deleteOrganizationResponse, error) {
	rsp, err := c.DeleteOrganization(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationResponse(rsp)
}

// GetOrganizationByIdWithResponse request returning *GetOrganizationByIdResponse
func (c *ClientWithResponses) GetOrganizationByIdWithResponse(ctx context.Context, id int, params *GetOrganizationByIdParams) (*getOrganizationByIdResponse, error) {
	rsp, err := c.GetOrganizationById(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationByIdResponse(rsp)
}

// UpdateOrganizationWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationResponse
func (c *ClientWithResponses) UpdateOrganizationWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*updateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganizationWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationWithResponse(ctx context.Context, id int, body UpdateOrganizationJSONRequestBody) (*updateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganization(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

// ParseGetOrganizationsResponse parses an HTTP response from a GetOrganizationsWithResponse call
func ParseGetOrganizationsResponse(rsp *http.Response) (*getOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseCreateOrganizationResponse parses an HTTP response from a CreateOrganizationWithResponse call
func ParseCreateOrganizationResponse(rsp *http.Response) (*createOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &createOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		response.JSON201 = &Organization{}
		if err := json.Unmarshal(bodyBytes, response.JSON201); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseDeleteOrganizationResponse parses an HTTP response from a DeleteOrganizationWithResponse call
func ParseDeleteOrganizationResponse(rsp *http.Response) (*deleteOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &deleteOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseGetOrganizationByIdResponse parses an HTTP response from a GetOrganizationByIdWithResponse call
func ParseGetOrganizationByIdResponse(rsp *http.Response) (*getOrganizationByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getOrganizationByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Organization{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseUpdateOrganizationResponse parses an HTTP response from a UpdateOrganizationWithResponse call
func ParseUpdateOrganizationResponse(rsp *http.Response) (*updateOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &updateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Organization{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}

	}

	return response, nil
}
